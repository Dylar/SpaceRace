static def getDate() {
    return Integer.valueOf(new Date().format('yyyyMMddHH'))
}

android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ["src/main/kotlin/"]
            aidl.srcDirs = ["src/main/kotlin/"]
            renderscript.srcDirs = ["src/main/kotlin/"]
            res.srcDirs = ["src/main/kotlin/res"]
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def flavor = variant.name
            def versionName = variant.versionName
            outputFileName = "SR_${flavor}_${versionName}.apk"
        }
    }

    signingConfigs {

        Properties props = new Properties()
        def propFile = file('../android/signing.prop')
        if (propFile.canRead()) {
            props.load(propFile.newReader())
        }

        devFreeRelease {
            storeFile file("../android/keystores/spacerace.keystore")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD") ?: props["storePassword"]
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") ?: props["keyAlias"]
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") ?: props["keyPassword"]
        }
        devFreeDebug {
            storeFile file("../android/keystores/spacerace.keystore")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD") ?: props["storePassword"]
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") ?: props["keyAlias"]
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") ?: props["keyPassword"]
        }
        prodPaidRelease {
            storeFile file("../android/keystores/spacerace.keystore")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD") ?: props["storePassword"]
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") ?: props["keyAlias"]
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") ?: props["keyPassword"]
        }

        debug {
            storeFile file("../android/keystores/spacerace.keystore")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD") ?: props["storePassword"]
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") ?: props["keyAlias"]
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") ?: props["keyPassword"]
        }

        release {
            storeFile file("../keystore/lunar.keystore")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
        }

    }

//    def applicationDefinitions = [
//            ['name': 'devFreeRelease'],
//            ['name': 'devFreeDebug']
//    ]
//
//    applicationDefinitions.each { applicationDefinition ->
//        def signingConfig = signingConfigsMap[applicationDefinition['name']]
//        android.productFlavors.
//                android.productFlavors.create(applicationDefinition['name'], { flavor ->
//            flavor.signingConfig = android.signingConfigs.create(applicationDefinition['name'])
//            flavor.signingConfig.storeFile = file(signingConfig.storeFile)
//            flavor.signingConfig.storePassword = signingConfig.storePassword
//            flavor.signingConfig.keyAlias = signingConfig.keyAlias
//            flavor.signingConfig.keyPassword = signingConfig.keyPassword
//        })
//    }
//
//    applicationVariants.all { variant ->
//        if (variant.name.contains("Release")) {
//            variant.mergedFlavor.setSigningConfig(signingConfigs.release)
//        } else {
//            variant.mergedFlavor.setSigningConfig(signingConfigs.debug)
//        }
//    }

    defaultConfig {
        applicationId appId
        minSdkVersion 23
        targetSdkVersion 28
        versionCode = System.getenv("BITRISE_BUILD_NUMBER") as Integer ?: 1
//        versionCode 1
        versionName project.version

        multiDexEnabled true
        multiDexKeepProguard file('multidex-config.pro')
    }

    flavorDimensions 'server', 'client'
    productFlavors {
        prod {
            dimension = 'server'
            applicationIdSuffix = ".prod"
        }

        stage {
            dimension = 'server'
            applicationIdSuffix = ".test"
        }

        dev {
            dimension = 'server'
            applicationIdSuffix = ".dev"
        }

        paid {
            dimension = 'client'
            applicationIdSuffix = ".paid"
        }

        free {
            dimension = 'client'
            applicationIdSuffix = ".free"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.android.play:core:1.6.3'
    implementation 'com.getkeepsafe.relinker:relinker:1.3.1'
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}
tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}
task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'de.bitb.spacerace/de.bitb.spacerace.AndroidLauncher'
}
// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src/main/kotlin", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    classpath {
        plusConfigurations += [project.configurations.compile]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}
// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src/main/kotlin");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}
